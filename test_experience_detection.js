/**
 * –¢–µ—Å—Ç —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞ –æ–ø—ã—Ç–∞ —Ä–∞–±–æ—Ç—ã
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –∑–∞–ø–∏—Å–∏ –æ–ø—ã—Ç–∞ (HH, —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ä–µ–∑—é–º–µ, —Ñ—Ä–∏–ª–∞–Ω—Å –∏ —Ç.–¥.)
 */

const { detectExperience, injectExperienceMarkers } = require('./backend/utils/experience');

// –¢–µ—Å—Ç–æ–≤—ã–µ —Ä–µ–∑—é–º–µ —Å —Ä–∞–∑–Ω—ã–º–∏ —Ñ–æ—Ä–º–∞—Ç–∞–º–∏ –∑–∞–ø–∏—Å–∏ –æ–ø—ã—Ç–∞
const testResumes = [
  {
    name: "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —Ä–µ–∑—é–º–µ —Å '–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã'",
    text: `
–ò–í–ê–ù –ò–í–ê–ù–û–í
Frontend Developer

–ö–û–ù–¢–ê–ö–¢–´
Email: ivan.ivanov@email.com
–¢–µ–ª–µ—Ñ–æ–Ω: +7 (999) 123-45-67

–û–ü–´–¢ –†–ê–ë–û–¢–´
Frontend Developer | –û–û–û "–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –±—É–¥—É—â–µ–≥–æ" | 2022 - –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è
‚Ä¢ –†–∞–∑—Ä–∞–±–∞—Ç—ã–≤–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º React.js
‚Ä¢ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–ª –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π, —É–ª—É—á—à–∏–≤ –≤—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ 30%

–ù–ê–í–´–ö–ò
JavaScript, React, TypeScript
`
  },
  {
    name: "HH —Ä–µ–∑—é–º–µ —Å '–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏' –≤–º–µ—Å—Ç–æ '–û–ø—ã—Ç'",
    text: `
–ü–ï–¢–† –ü–ï–¢–†–û–í
Backend Developer

–°–ü–ï–¶–ò–ê–õ–ò–ó–ê–¶–ò–ò
Backend Developer | –û–û–û "–ë–∞–Ω–∫ –†–æ—Å—Å–∏–∏" | 2021 - 2023
‚Ä¢ –†–∞–∑—Ä–∞–±–∞—Ç—ã–≤–∞–ª –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å—ã –Ω–∞ Java Spring Boot
‚Ä¢ –ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–ª —Å–∏—Å—Ç–µ–º—ã KYC/AML, —Å–Ω–∏–∑–∏–ª –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞ 40%

Backend Developer | –û–û–û "–§–∏–Ω—Ç–µ—Ö –°—Ç–∞—Ä—Ç–∞–ø" | 2023 - –Ω.–≤.
‚Ä¢ –°–æ–∑–¥–∞–≤–∞–ª REST API –¥–ª—è –º–æ–±–∏–ª—å–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
‚Ä¢ –†–∞–±–æ—Ç–∞–ª —Å PostgreSQL –∏ Redis

–ù–ê–í–´–ö–ò
Java, Spring Boot, PostgreSQL
`
  },
  {
    name: "–†–µ–∑—é–º–µ —Å '–ü—Ä–æ–µ–∫—Ç—ã' –≤–º–µ—Å—Ç–æ '–û–ø—ã—Ç'",
    text: `
–ê–ù–ù–ê –°–ò–î–û–†–û–í–ê
Data Analyst

–ü–†–û–ï–ö–¢–´
Data Analyst | –û–û–û "–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ü–ª—é—Å" | 2022 - –Ω.–≤.
‚Ä¢ –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–ª –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —Å–æ–∑–¥–∞–≤–∞–ª –¥–∞—à–±–æ—Ä–¥—ã
‚Ä¢ –ü–æ–≤—ã—Å–∏–ª –∫–æ–Ω–≤–µ—Ä—Å–∏—é –Ω–∞ 25% –±–ª–∞–≥–æ–¥–∞—Ä—è –∞–Ω–∞–ª–∏—Ç–∏–∫–µ

–ü—Ä–∞–∫—Ç–∏–∫–∞ | –û–û–û "–°—Ç–∞—Ä—Ç–∞–ø" | 2021 - 2022
‚Ä¢ –°–æ–∑–¥–∞–≤–∞–ª –æ—Ç—á–µ—Ç—ã –≤ Power BI
‚Ä¢ –†–∞–±–æ—Ç–∞–ª —Å SQL –∏ Python

–û–ë–†–ê–ó–û–í–ê–ù–ò–ï
–ú–æ—Å–∫–æ–≤—Å–∫–∏–π —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç
`
  },
  {
    name: "–§—Ä–∏–ª–∞–Ω—Å —Ä–µ–∑—é–º–µ",
    text: `
–ú–ê–†–ò–Ø –ö–û–ó–õ–û–í–ê
UI/UX Designer

–§–†–ò–õ–ê–ù–°
UI/UX Designer | –°–∞–º–æ–∑–∞–Ω—è—Ç—ã–π | 2021 - –Ω.–≤.
‚Ä¢ –°–æ–∑–¥–∞–≤–∞–ª –¥–∏–∑–∞–π–Ω –¥–ª—è –≤–µ–±-—Å–∞–π—Ç–æ–≤ –∏ –º–æ–±–∏–ª—å–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π
‚Ä¢ –†–∞–±–æ—Ç–∞–ª —Å Figma, Adobe XD

–ö–æ–Ω—Å–∞–ª—Ç–∏–Ω–≥ | –û–û–û "–î–∏–∑–∞–π–Ω –ê–≥–µ–Ω—Ç—Å—Ç–≤–æ" | 2022 - 2023
‚Ä¢ –ö–æ–Ω—Å—É–ª—å—Ç–∏—Ä–æ–≤–∞–ª –ø–æ –≤–æ–ø—Ä–æ—Å–∞–º UX/UI
‚Ä¢ –ü—Ä–æ–≤–æ–¥–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è

–ù–ê–í–´–ö–ò
Figma, Adobe XD, Sketch
`
  },
  {
    name: "–†–µ–∑—é–º–µ —Å –¥–∞—Ç–∞–º–∏ –±–µ–∑ —è–≤–Ω–æ–≥–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞",
    text: `
–ê–õ–ï–ö–°–ï–ô –í–û–õ–ö–û–í
DevOps Engineer

2022 - –Ω.–≤. | DevOps Engineer | –û–û–û "–û–±–ª–∞—á–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏"
‚Ä¢ –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–ª CI/CD –ø–∞–π–ø–ª–∞–π–Ω—ã
‚Ä¢ –†–∞–±–æ—Ç–∞–ª —Å Docker –∏ Kubernetes

2021 - 2022 | System Administrator | –û–û–û "IT –ö–æ–º–ø–∞–Ω–∏—è"
‚Ä¢ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª Linux —Å–µ—Ä–≤–µ—Ä—ã
‚Ä¢ –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥

–û–ë–†–ê–ó–û–í–ê–ù–ò–ï
–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç
`
  },
  {
    name: "–†–µ–∑—é–º–µ –±–µ–∑ –æ–ø—ã—Ç–∞ (—Ç–æ–ª—å–∫–æ –Ω–∞–≤—ã–∫–∏)",
    text: `
–ï–õ–ï–ù–ê –ù–û–í–ò–ö–û–í–ê
Junior Developer

–û –°–ï–ë–ï
–ú–æ–ª–æ–¥–æ–π —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç, –∏—â—É—â–∏–π –ø–µ—Ä–≤—É—é —Ä–∞–±–æ—Ç—É –≤ IT

–ù–ê–í–´–ö–ò
JavaScript, HTML, CSS, React

–û–ë–†–ê–ó–û–í–ê–ù–ò–ï
–ú–æ—Å–∫–æ–≤—Å–∫–∏–π —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç | 2023
`
  }
];

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
function testExperienceDetection() {
  console.log('üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –î–ï–¢–ï–ö–¢–û–†–ê –û–ü–´–¢–ê –†–ê–ë–û–¢–´\n');
  
  testResumes.forEach((resume, index) => {
    console.log(`\n${index + 1}. ${resume.name}`);
    console.log('‚îÄ'.repeat(50));
    
    const evidence = detectExperience(resume.text);
    
    console.log(`–ù–∞–π–¥–µ–Ω –æ–ø—ã—Ç: ${evidence.found ? '‚úÖ –î–ê' : '‚ùå –ù–ï–¢'}`);
    console.log(`–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ —Å –æ–ø—ã—Ç–æ–º: ${evidence.lines.length}`);
    console.log(`–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–ª–æ–∫–æ–≤: ${evidence.spans.length}`);
    
    if (evidence.found) {
      console.log('\n–ù–∞–π–¥–µ–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ —Å –æ–ø—ã—Ç–æ–º:');
      evidence.lines.forEach((line, i) => {
        console.log(`  ${i + 1}. ${line.substring(0, 80)}${line.length > 80 ? '...' : ''}`);
      });
      
      console.log('\n–ë–ª–æ–∫–∏ –æ–ø—ã—Ç–∞:');
      evidence.spans.forEach((span, i) => {
        console.log(`  –ë–ª–æ–∫ ${i + 1}: —Å—Ç—Ä–æ–∫–∏ ${span.start + 1}-${span.end + 1}`);
      });
      
      // –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–∞—Ä–∫–∏—Ä–æ–≤–∫—É
      const markedText = injectExperienceMarkers(resume.text, evidence.spans);
      const hasMarkers = markedText.includes('[EXPERIENCE]') && markedText.includes('[/EXPERIENCE]');
      console.log(`–ú–∞—Ä–∫–µ—Ä—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã: ${hasMarkers ? '‚úÖ –î–ê' : '‚ùå –ù–ï–¢'}`);
      
      if (hasMarkers) {
        console.log('\n–ü—Ä–∏–º–µ—Ä –º–∞—Ä–∫–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞:');
        const lines = markedText.split('\n');
        const markedLines = lines.filter(line => line.includes('[EXPERIENCE]') || line.includes('[/EXPERIENCE]'));
        markedLines.slice(0, 4).forEach(line => {
          console.log(`  ${line}`);
        });
      }
    }
    
    console.log('\n' + '‚îÄ'.repeat(50));
  });
  
  console.log('\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê:');
  const results = testResumes.map(resume => {
    const evidence = detectExperience(resume.text);
    return {
      name: resume.name,
      found: evidence.found,
      lines: evidence.lines.length,
      spans: evidence.spans.length
    };
  });
  
  const foundCount = results.filter(r => r.found).length;
  const totalCount = results.length;
  
  console.log(`–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: ${totalCount}`);
  console.log(`–û–ø—ã—Ç –Ω–∞–π–¥–µ–Ω: ${foundCount}/${totalCount} (${Math.round(foundCount/totalCount*100)}%)`);
  
  results.forEach(r => {
    console.log(`  ${r.name}: ${r.found ? '‚úÖ' : '‚ùå'} (${r.lines} —Å—Ç—Ä–æ–∫, ${r.spans} –±–ª–æ–∫–æ–≤)`);
  });
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
if (require.main === module) {
  testExperienceDetection();
}

module.exports = { testExperienceDetection };
