/**
 * –¢–µ—Å—Ç –ø–∞—Ä—Å–µ—Ä–∞ –æ—Ü–µ–Ω–æ–∫
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –æ—Ü–µ–Ω–æ–∫ –∏–∑ –æ—Ç–≤–µ—Ç–∞ –º–æ–¥–µ–ª–∏
 */

const { parseScore } = require('./backend/utils/score');

// –¢–µ—Å—Ç–æ–≤—ã–µ —Å–ª—É—á–∞–∏
const testCases = [
  // –ß–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
  { input: 85, expected: 85, description: "–ß–∏—Å–ª–æ 85" },
  { input: 0, expected: 0, description: "–ß–∏—Å–ª–æ 0" },
  { input: 100, expected: 100, description: "–ß–∏—Å–ª–æ 100" },
  { input: 150, expected: 100, description: "–ß–∏—Å–ª–æ –±–æ–ª—å—à–µ 100 (–¥–æ–ª–∂–Ω–æ –æ–±—Ä–µ–∑–∞—Ç—å—Å—è)" },
  { input: -10, expected: 0, description: "–û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ (–¥–æ–ª–∂–Ω–æ —Å—Ç–∞—Ç—å 0)" },
  
  // –°—Ç—Ä–æ–∫–æ–≤—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
  { input: "70/100", expected: 70, description: "–§–æ—Ä–º–∞—Ç '70/100'" },
  { input: "85%", expected: 85, description: "–§–æ—Ä–º–∞—Ç '85%'" },
  { input: "–û—Ü–µ–Ω–∫–∞: 75", expected: 75, description: "–§–æ—Ä–º–∞—Ç '–û—Ü–µ–Ω–∫–∞: 75'" },
  { input: "–¢–µ–∫—Å—Ç: 80 –∏–∑ 100", expected: 80, description: "–§–æ—Ä–º–∞—Ç '80 –∏–∑ 100'" },
  { input: "–°—Ç—Ä—É–∫—Ç—É—Ä–∞: 90", expected: 90, description: "–§–æ—Ä–º–∞—Ç '–°—Ç—Ä—É–∫—Ç—É—Ä–∞: 90'" },
  
  // –ì—Ä–∞–Ω–∏—á–Ω—ã–µ —Å–ª—É—á–∞–∏
  { input: null, expected: null, description: "null" },
  { input: undefined, expected: null, description: "undefined" },
  { input: "", expected: null, description: "–ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞" },
  { input: "–Ω–µ—Ç –æ—Ü–µ–Ω–∫–∏", expected: null, description: "–°—Ç—Ä–æ–∫–∞ –±–µ–∑ —á–∏—Å–µ–ª" },
  { input: "abc", expected: null, description: "–¢–æ–ª—å–∫–æ –±—É–∫–≤—ã" },
  
  // –°–ª–æ–∂–Ω—ã–µ —Å–ª—É—á–∞–∏
  { input: "–û—Ü–µ–Ω–∫–∞ —Ç–µ–∫—Å—Ç–∞: 65 –±–∞–ª–ª–æ–≤ –∏–∑ 100", expected: 65, description: "–°–ª–æ–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å —Ç–µ–∫—Å—Ç–æ–º" },
  { input: "ATS —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å: 88%", expected: 88, description: "–§–æ—Ä–º–∞—Ç —Å –ø—Ä–æ—Ü–µ–Ω—Ç–∞–º–∏" },
  { input: "–û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞ 92", expected: 92, description: "–§–æ—Ä–º–∞—Ç –±–µ–∑ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–π" },
];

function testScoreParser() {
  console.log('üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–ê–†–°–ï–†–ê –û–¶–ï–ù–û–ö\n');
  
  let passed = 0;
  let total = testCases.length;
  
  testCases.forEach((testCase, index) => {
    const result = parseScore(testCase.input);
    const success = result === testCase.expected;
    
    console.log(`${index + 1}. ${testCase.description}`);
    console.log(`   –í—Ö–æ–¥: ${JSON.stringify(testCase.input)}`);
    console.log(`   –û–∂–∏–¥–∞–ª–æ—Å—å: ${testCase.expected}`);
    console.log(`   –ü–æ–ª—É—á–µ–Ω–æ: ${result}`);
    console.log(`   –†–µ–∑—É–ª—å—Ç–∞—Ç: ${success ? '‚úÖ –ü–†–û–®–ï–õ' : '‚ùå –ü–†–û–í–ê–õ'}`);
    console.log('');
    
    if (success) passed++;
  });
  
  console.log('üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê:');
  console.log(`–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: ${total}`);
  console.log(`–ü—Ä–æ–π–¥–µ–Ω–æ: ${passed}/${total} (${Math.round(passed/total*100)}%)`);
  
  if (passed === total) {
    console.log('üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã!');
  } else {
    console.log('‚ö†Ô∏è  –ï—Å—Ç—å –ø—Ä–æ–≤–∞–ª–µ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã');
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
if (require.main === module) {
  testScoreParser();
}

module.exports = { testScoreParser };
