/**
 * –û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª —Å–µ—Ä–≤–µ—Ä–∞ ResumeMint.ru
 * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Express —Å–µ—Ä–≤–µ—Ä–∞ —Å middleware –∏ –º–∞—Ä—à—Ä—É—Ç–∞–º–∏
 */

const express = require('express');
const cors = require('cors');
const multer = require('multer');
const path = require('path');
const fs = require('fs').promises;
const OpenAI = require('openai');
require('dotenv').config();

const app = express();
const PORT = process.env.PORT || 5000;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OpenAI
const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY || 'your-api-key-here'
});

// Middleware
app.use(cors());
app.use(express.json({ limit: '10mb' }));
app.use(express.urlencoded({ extended: true, limit: '10mb' }));

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ multer –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤
const storage = multer.diskStorage({
  destination: async (req, file, cb) => {
    const uploadDir = path.join(__dirname, 'uploads');
    try {
      await fs.mkdir(uploadDir, { recursive: true });
      cb(null, uploadDir);
    } catch (error) {
      cb(error);
    }
  },
  filename: (req, file, cb) => {
    const uniqueSuffix = Date.now() + '-' + Math.round(Math.random() * 1E9);
    const ext = path.extname(file.originalname);
    cb(null, `resume-${uniqueSuffix}${ext}`);
  }
});

const fileFilter = (req, file, cb) => {
  const allowedTypes = [
    'application/vnd.openxmlformats-officedocument.wordprocessingml.document',
    'application/msword',
    'text/plain',
    'application/pdf'
  ];
  
  if (allowedTypes.includes(file.mimetype)) {
    cb(null, true);
  } else {
    cb(new Error('–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞. –†–∞–∑—Ä–µ—à–µ–Ω—ã: .docx, .doc, .txt, .pdf'), false);
  }
};

const upload = multer({
  storage: storage,
  fileFilter: fileFilter,
  limits: {
    fileSize: 10 * 1024 * 1024,
    files: 1
  }
});

// –ü—Ä–æ—Å—Ç–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∏–∑ —Ñ–∞–π–ª–∞
async function extractTextFromFile(file) {
  const filePath = file.path;
  const ext = path.extname(file.originalname).toLowerCase();
  
  if (ext === '.txt') {
    return await fs.readFile(filePath, 'utf8');
  } else if (ext === '.pdf') {
    // –î–ª—è PDF –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É, —Ç–∞–∫ –∫–∞–∫ –Ω—É–∂–Ω–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ pdf-parse
    return `[PDF —Ñ–∞–π–ª: ${file.originalname}] –°–æ–¥–µ—Ä–∂–∏–º–æ–µ PDF —Ñ–∞–π–ª–∞ –±—É–¥–µ—Ç –∏–∑–≤–ª–µ—á–µ–Ω–æ –ø—Ä–∏ –ø–æ–ª–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–µ.`;
  } else if (ext === '.docx' || ext === '.doc') {
    // –î–ª—è Word —Ñ–∞–π–ª–æ–≤ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
    return `[Word —Ñ–∞–π–ª: ${file.originalname}] –°–æ–¥–µ—Ä–∂–∏–º–æ–µ Word —Ñ–∞–π–ª–∞ –±—É–¥–µ—Ç –∏–∑–≤–ª–µ—á–µ–Ω–æ –ø—Ä–∏ –ø–æ–ª–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–µ.`;
  }
  
  return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞';
}

// –§—É–Ω–∫—Ü–∏—è AI –∞–Ω–∞–ª–∏–∑–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º OpenAI
async function analyzeResumeWithAI(resumeText) {
  try {
    const systemPrompt = `–¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Ä–µ–∑—é–º–µ, ATS-—Å–∏—Å—Ç–µ–º–∞–º, –∫–∞—Ä—å–µ—Ä–Ω–æ–º—É —Ä–∞–∑–≤–∏—Ç–∏—é –∏ —Å–∏—Å—Ç–µ–º–µ IT-–≥—Ä–µ–π–¥–æ–≤. 

–¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∑—é–º–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –∏ –¥–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é –æ—Ü–µ–Ω–∫—É –ø–æ —Å–ª–µ–¥—É—é—â–∏–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º:

1. –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∏ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Ä–µ–∑—é–º–µ
2. –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å ATS-—Å–∏—Å—Ç–µ–º–∞–º–∏
3. –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º HR-—Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º
4. –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ IT-–≥—Ä–µ–π–¥–∞ (Junior/Middle/Senior/Lead)

–ê–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ä–µ–∑—é–º–µ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ –∏ –¥–∞–≤–∞–π –æ—Ç–≤–µ—Ç –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ:

# –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—é–º–µ

## 1. –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∏ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ
- –ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
- –¶–µ–ª—å / –ñ–µ–ª–∞–µ–º–∞—è –¥–æ–ª–∂–Ω–æ—Å—Ç—å
- –û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã
- –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ
- –ù–∞–≤—ã–∫–∏

## 2. –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å ATS
- –§–æ—Ä–º–∞—Ç —Ä–µ–∑—é–º–µ
- –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
- –°—Ç—Ä—É–∫—Ç—É—Ä–∞

## 3. –ê–Ω–∞–ª–∏–∑ –ø–æ HR-—Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º
- –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Å —Ü–∏—Ñ—Ä–∞–º–∏
- –£—Ä–æ–≤–µ–Ω—å —è–∑—ã–∫–æ–≤
- –†–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–π –æ–ø—ã—Ç

## 4. –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ IT-–≥—Ä–µ–π–¥–∞
- –û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã
- –ù–∞–≤—ã–∫–∏
- –°–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å
- –°–ª–æ–∂–Ω–æ—Å—Ç—å –∑–∞–¥–∞—á
- –£—Ä–æ–≤–µ–Ω—å –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏

## –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
- –°–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã ‚úÖ
- –ù–µ–¥–æ—á–µ—Ç—ã ‚ö†Ô∏è
- –ß—Ç–æ –¥–æ–±–∞–≤–∏—Ç—å üîß
- –ò—Ç–æ–≥–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞ –≥—Ä–µ–π–¥–∞

–¢–∞–∫–∂–µ –¥–∞–π –∫—Ä–∞—Ç–∫—É—é –æ—Ü–µ–Ω–∫—É –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ:
{
  "grade": "Junior/Middle/Senior/Lead",
  "atsScore": —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 100,
  "skills": ["–Ω–∞–π–¥–µ–Ω–Ω—ã–µ –Ω–∞–≤—ã–∫–∏"],
  "recommendations": ["—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"],
  "strongPoints": ["—Å–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã"],
  "weakPoints": ["–Ω–µ–¥–æ—á–µ—Ç—ã"]
}`;

    const userPrompt = `–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–ª–µ–¥—É—é—â–µ–µ —Ä–µ–∑—é–º–µ:

${resumeText}

–î–∞–π –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ –∏ JSON —Å –æ—Ü–µ–Ω–∫–æ–π.`;

    const completion = await openai.chat.completions.create({
      model: "gpt-3.5-turbo",
      messages: [
        { role: "system", content: systemPrompt },
        { role: "user", content: userPrompt }
      ],
      temperature: 0.7,
      max_tokens: 2000
    });

    const response = completion.choices[0].message.content;
    
    // –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å JSON –∏–∑ –æ—Ç–≤–µ—Ç–∞
    const jsonMatch = response.match(/\{[\s\S]*\}/);
    if (jsonMatch) {
      try {
        const jsonData = JSON.parse(jsonMatch[0]);
        return {
          ...jsonData,
          detailedAnalysis: response.replace(jsonMatch[0], '').trim()
        };
      } catch (e) {
        console.error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON:', e);
      }
    }
    
    // –ï—Å–ª–∏ JSON –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑
    return {
      grade: '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω',
      atsScore: 60,
      skills: [],
      recommendations: ['–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞'],
      strongPoints: [],
      weakPoints: [],
      detailedAnalysis: response
    };
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ OpenAI API:', error);
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑ –ø—Ä–∏ –æ—à–∏–±–∫–µ
    return {
      grade: '–û—à–∏–±–∫–∞ API',
      atsScore: 0,
      skills: [],
      recommendations: ['–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ AI. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'],
      strongPoints: [],
      weakPoints: [],
      detailedAnalysis: '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ AI —Å–µ—Ä–≤–∏—Å—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
    };
  }
}



// API endpoints
app.post('/api/resume/upload', upload.single('resume'), async (req, res) => {
  try {
    if (!req.file) {
      return res.status(400).json({
        success: false,
        error: { message: '–§–∞–π–ª –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω' }
      });
    }
    
    console.log('–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞:', req.file.originalname);
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ —Ñ–∞–π–ª–∞
    const resumeText = await extractTextFromFile(req.file);
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—é–º–µ
    const analysisResult = await analyzeResumeWithAI(resumeText);
    
    res.json({
      success: true,
      message: '–†–µ–∑—é–º–µ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ',
      data: analysisResult
    });
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞:', error);
    res.status(500).json({
      success: false,
      error: { message: error.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞' }
    });
  }
});

app.post('/api/resume/analyze-text', async (req, res) => {
  try {
    const { resumeText } = req.body;
    
    if (!resumeText || resumeText.trim().length < 50) {
      return res.status(400).json({
        success: false,
        error: { message: '–¢–µ–∫—Å—Ç —Ä–µ–∑—é–º–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π. –ú–∏–Ω–∏–º—É–º 50 —Å–∏–º–≤–æ–ª–æ–≤.' }
      });
    }
    
    console.log('–ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Ä–µ–∑—é–º–µ');
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—é–º–µ
    const analysisResult = await analyzeResumeWithAI(resumeText.trim());
    
    res.json({
      success: true,
      message: '–†–µ–∑—é–º–µ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ',
      data: analysisResult
    });
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ç–µ–∫—Å—Ç–∞:', error);
    res.status(500).json({
      success: false,
      error: { message: error.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ä–µ–∑—é–º–µ' }
    });
  }
});

// Health check
app.get('/api/health', (req, res) => {
  res.json({
    status: 'OK',
    timestamp: new Date().toISOString(),
    service: 'ResumeMint API',
    version: '1.0.0'
  });
});

// 404 handler
app.use('*', (req, res) => {
  res.status(404).json({
    error: '–ú–∞—Ä—à—Ä—É—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω',
    code: 'ROUTE_NOT_FOUND',
    path: req.originalUrl
  });
});

// Error handler
app.use((error, req, res, next) => {
  console.error('–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:', error);
  res.status(500).json({
    success: false,
    error: { message: error.message || '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' }
  });
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(PORT, () => {
  console.log(`üöÄ ResumeMint API —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
  console.log(`üîó API –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: http://localhost:${PORT}/api`);
});

module.exports = app;
